<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/${subModuleName}/web</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.web;

<#list table.columnList as c>
		<#-- 如果存在自定义java对象 -->
		<#if c.tableName?? && c.tableName!="">
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
		<#break>
		</#if>
</#list>
import java.util.List;
import java.util.Map;


import com.google.common.collect.Maps;
import org.activiti.engine.repository.ProcessDefinition;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;

import com.google.common.collect.Lists;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.common.config.Global;
import com.jeeplus.common.json.AjaxJson;
import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.web.BaseController;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.modules.act.service.ActProcessService;
import com.jeeplus.modules.act.service.ActTaskService;
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.entity.${ClassName};
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.service.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	@Autowired
	private ActProcessService actProcessService;
	@Autowired
	private ActTaskService actTaskService;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	

	/**
	 * 查看，增加，编辑${functionNameSimple}表单页面
	 */
	@RequestMapping(value = "form/{mode}")
	public String form(@PathVariable String mode, ${ClassName} ${className}, Model model) {
		model.addAttribute("${className}", ${className});
		if("add".equals(mode) || "edit".equals(mode)){
			return "${lastPackageName}/${viewPrefix}Form";
		}else{//audit
			return "${lastPackageName}/${viewPrefix}Audit";
		}
	}

	/**
	 * 保存${functionNameSimple}
	 */
	@ResponseBody
	@RequestMapping(value = "save")
	public AjaxJson save(${ClassName} ${className}, Model model) throws Exception{
		AjaxJson j = new AjaxJson();
		/**
		 * 后台hibernate-validation插件校验
		 */
		String errMsg = beanValidator(${className});
		if (StringUtils.isNotBlank(errMsg)){
			j.setSuccess(false);
			j.setMsg(errMsg);
			return j;
		}


		/**
		 * 流程审批
		 */
		if (StringUtils.isBlank(${className}.getId())){
			//新增或编辑表单保存
			${className}Service.save(${className});//保存
			// 启动流程
			ProcessDefinition p = actProcessService.getProcessDefinition(${className}.getAct().getProcDefId());
			String title = ${className}.getCurrentUser().getName()+"在"+ DateUtils.getDateTime()+"发起"+p.getName();
			actTaskService.startProcess(p.getKey(),  "${table.name}", ${className}.getId(), title);
			j.setMsg("发起流程审批成功!");
			j.getBody().put("targetUrl",  "/act/task/process/");
		}else{
			//新增或编辑表单保存
			${className}Service.save(${className});//保存
			${className}.getAct().setComment(("yes".equals(${className}.getAct().getFlag())?"[重新申请] ":"[销毁申请] "));
			// 完成流程任务
			Map<String, Object> vars = Maps.newHashMap();
			vars.put("reapply", "yes".equals(${className}.getAct().getFlag())? true : false);
			actTaskService.complete(${className}.getAct().getTaskId(), ${className}.getAct().getProcInsId(), ${className}.getAct().getComment(), ${className}.getContent(), vars);
			j.setMsg("提交成功！");
			j.getBody().put("targetUrl",  "/act/task/todo/");
		}

		return j;
	}
	


}]]>
	</content>
</template>